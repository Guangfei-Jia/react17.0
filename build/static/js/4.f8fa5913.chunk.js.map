{"version":3,"sources":["hooks/useModalH.tsx","pages/system/role/index.tsx","hooks/useRequestH.tsx"],"names":["ModalHook","useState","visible","setVisible","confirmLoading","setConfirmLoading","showModal","fn","handleCancel","handleOk","setTimeout","Role","useRequestH","roleUrl","list","data","isLoading","isError","setQuery","setUrl","useModalH","Form","useForm","form","form1","delModal","record","a","deleteAction","delete","id","columns","title","dataIndex","key","width","render","text","size","onClick","setFieldsValue","name","editModal","onConfirm","okText","cancelText","href","onFinish","validateFields","values","style","marginBottom","layout","labelCol","span","wrapperCol","autoComplete","Item","label","placeholder","type","htmlType","margin","resetFields","spinning","tip","delay","rowKey","dataSource","onOk","onCancel","preserve","rules","required","message","RequestHook","method","reqUrl","initQuery","setData","url","query","setIsLoading","setIsError","useEffect","getAction","res","postAction","putAction","rows","getData"],"mappings":"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","file":"static/js/4.f8fa5913.chunk.js","sourcesContent":["/*\n * @Descripttion: \n * @version: \n * @Author: fei\n * @Date: 2021-12-03 11:06:31\n * @LastEditors: fei\n * @LastEditTime: 2021-12-06 11:36:59\n */\nimport { useState } from \"react\";\nconst ModalHook = () => {\n    const [visible, setVisible] = useState(false);\n    const [confirmLoading, setConfirmLoading] = useState(false);\n  \n    //显示modal，执行后续操作\n    const showModal = (fn?:()=>void) => {\n      setVisible(true);\n      if(typeof fn === \"function\") fn();\n    };\n    const handleOk = (fn?:()=>void) => {\n      setConfirmLoading(true);\n      setTimeout(() => {\n        setVisible(false);\n        setConfirmLoading(false);\n      }, 2000);\n    };\n  \n    const handleCancel = (fn?:()=>void) => {\n      setVisible(false);\n      if(typeof fn === \"function\") fn();\n    };\n  \n    return {visible, confirmLoading, showModal, handleCancel, handleOk};\n  };\n\nexport default ModalHook;","/*\n * @Descripttion: \n * @version: \n * @Author: fei\n * @Date: 2021-09-23 14:58:21\n * @LastEditors: fei\n * @LastEditTime: 2021-12-07 16:21:21\n */\nimport React, { FC } from 'react';\nimport { Table, Space, Modal, Button, Form, Input, Row, Col, Popconfirm, Spin } from 'antd';\nimport { roleUrl } from '@/api'\nimport useRequestH from '@/hooks/useRequestH'\nimport useModalH from '@/hooks/useModalH'\nimport { postAction,deleteAction } from '@/api/axios';\nconst Role:FC = () => {\n    const {data, isLoading, isError, setUrl, setQuery} = useRequestH('post',roleUrl.list,{});\n    const {visible, confirmLoading, showModal, handleCancel, handleOk } = useModalH();\n    const [form] = Form.useForm();\n    const [form1] = Form.useForm();\n\n    const editModal = (record:any) => {\n        const setData = ():void => {\n            form.setFieldsValue({\n                name:record.name\n            })\n        }\n        showModal(setData)\n    }\n    const delModal = async (record:any) => {\n        await deleteAction(roleUrl.delete,{id:record.id});\n        setQuery({})\n    }\n    //表头\n    const columns = [\n        {\n            title: '创建时间',\n            dataIndex: 'updatedAt',\n            key: 'updatedAt',\n            width: '20%',\n        },\n        {\n            title: '角色名称',\n            dataIndex: 'name',\n            key: 'name',\n        },\n        {\n            title: '操作',\n            key: 'action',\n            width: '18%',\n            render: (text:any, record:any) => (\n              <Space size=\"middle\">\n                <a>授权</a>\n                <a onClick={() => editModal(record)}>编辑</a>\n                <Popconfirm\n                    title=\"确定删除？\"\n                    onConfirm={() => delModal(record)}\n                    okText=\"确定\"\n                    cancelText=\"取消\"\n                >\n                    <a href=\"#\">删除</a>\n                </Popconfirm>\n              </Space>\n            ),\n          },\n    ]\n    //\n    const onFinish = async () => {\n        const values = await form1.validateFields();\n        setQuery(values)\n    };\n    const onFinishFailed = (errorInfo: any) => {\n        console.log('onFinishFailed:');\n    };\n    const resetForm = () => {\n        form1.resetFields();\n        setQuery({})\n    }\n    if(isError) return <div>error</div>\n    return (\n        <>\n            <Row style={{marginBottom:\"10px\"}}>\n            <Form \n                name=\"basic\"\n                form={form1}\n                layout=\"inline\"\n                labelCol={{ span: 8 }}\n                wrapperCol={{ span: 16 }}\n                onFinish={onFinish}\n                // onFinishFailed={onFinishFailed}\n                autoComplete=\"off\"\n                >\n                    <Form.Item\n                        label=\"角色名称\"\n                        name=\"name\"\n                    >\n                        <Input placeholder='请输入角色名称' />\n                    </Form.Item>\n                \n                    <Button type=\"primary\" htmlType=\"submit\" style={{margin:\"0 8px\"}}>\n                    查询\n                    </Button>\n                    <Button type=\"primary\" onClick={resetForm}>\n                    重置\n                    </Button>\n            </Form>\n            </Row>\n            <Button type=\"primary\" style={{marginBottom:'10px'}} onClick={() => showModal()}>\n                新增\n            </Button>\n            <Spin spinning={isLoading} tip=\"加载中...\" delay={500}>\n                <Table\n                columns={columns}\n                rowKey=\"id\"\n                dataSource={data}\n                >\n                </Table>\n            </Spin>\n            <Modal\n                title=\"Title\"\n                visible={visible}\n                onOk={onFinish}\n                confirmLoading={confirmLoading}\n                onCancel={() => handleCancel()}\n                >\n                <Form \n                    preserve={false}\n                    form={form}\n                    name=\"basic\"\n                    labelCol={{ span: 6 }}\n                    wrapperCol={{ span: 18 }}\n                    autoComplete=\"off\"\n                    >\n                    <Form.Item\n                        label=\"name\"\n                        name=\"name\"\n                        rules={[{ required: true, message: '请输入角色名称!' }]}\n                    >\n                        <Input />\n                    </Form.Item>\n                </Form>\n            </Modal>\n        </>\n    )\n}\nexport default Role;","/*\n * @Descripttion: \n * @version: \n * @Author: fei\n * @Date: 2021-11-22 14:46:24\n * @LastEditors: fei\n * @LastEditTime: 2021-12-07 14:10:40\n */\n\nimport { getAction,postAction,putAction,deleteAction } from \"@/api/axios\";\nimport { useEffect, useState } from \"react\";\n\nconst RequestHook = (method:string,reqUrl:string,initQuery:object) => {\n    const [data, setData] = useState([]);\n    const [url, setUrl] = useState(reqUrl);\n    const [query, setQuery] = useState(initQuery);\n    const [isLoading, setIsLoading] = useState(false);\n    const [isError, setIsError] = useState(false);\n    useEffect(() => {\n        const getData = async () => {\n            setIsError(false);\n            setIsLoading(true);\n            try {\n                let res:any;\n                switch (method) {\n                    case 'get':\n                        res = await getAction(url, query);\n                        break;\n                    case 'post':\n                        res = await postAction(url, query);\n                        break;\n                    case 'put':\n                        res = await putAction(url, query);\n                        break;\n                    case 'delete':\n                        res = await deleteAction(url, query);\n                        break;\n                    default:\n                        res = await postAction(url, query);\n                        break;\n                }\n                setData(res.data.rows);\n            } catch (error) {\n                setIsError(true);\n            }\n            setIsLoading(false);\n        }\n        getData();\n    },[url, query])\n    return {data, isLoading, isError, setUrl, setQuery};\n}\n\nexport default RequestHook;"],"sourceRoot":""}